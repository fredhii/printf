.TH _printf "17/3/2020" Version "0.1" "_PRINTF MAN PAGE"
.DT _printf (0) 
.SH NAME
.NM _printf
.ND formatted output conversion.
.SH SYNOPSIS
.NM #include "holberton.h"
.PP

.BR int _printf(const char *format, ...);
.PP

.BR void p_char(char *buffer, va_list freya, int *move);
.PP

.BR void p_string(char *buffer, va_list freya, int *move);
.PP

.BR void p_prcnt(char *buffer, va_list freya, int *move);
.PP

.BR void p_doub(char *buffer, va_list freya, int *move);
.PP

.BR void p_int(char *buffer, va_list freya, int *move);
.PP

.SH Others prototypes
.PP

.BR void p_binary(char *buffer, va_list freya, int *move);
.PP

.BR void p_un_int(char *buffer, va_list freya, int *move);
.PP

.BR void p_hex(char *buffer, va_list freya, int *move);
.PP

.BR void p_hex2(char *buffer, va_list freya, int *move);
.PP

.BR void p_rev(char *buffer, va_list freya, int *move);
.PP

.BR void p_rot13(char *buffer, va_list freya, int *move);
.PP

.BR void p_address(char *buffer, va_list freya, int *move);
.PP

.SH DESCRIPTION 
.PP
The _printf() function is used to print the “character, string, float, integer, octal and 
hexadecimal values” onto the output screen. The functions in the _printf() family produce
 output according to a format as described below.

.PP

.SH RETURN VALUE
Upon successful return, these functions return the number of characters printed (excluding
the null byte used to end output to strings).
.PP

.SH FORMAT
The format string is a character string, beginning and ending in its initial shift state,
if any. The format string is composed of zero or more directives: ordinary characters 
(not %), which are copied unchanged to the output stream; and conversion specifications,
each of which results in fetching zero or more subsequent arguments. 
.PP

.SH EXAMPLES
.Nm With main.c we can test our functions:
.PP

#include "holberton.h"

.PP
.PP
_printf("decimal %d\n", 10000);
.PP
Output: decimal 10000
.PP
.PP
_printf("char %c\n", 'A');
.PP
Output: char A
.PP
.PP
_printf("string %s\n", "Hi my friend !");
.PP
Output: string Hi my friend !
.PP
.PP
_printf("integrer %i\n", 88);
.PP
Output: integrer 88
.PP
.PP
_printf("octal %o\n", 92);
.PP
Output: octal 134
.PP
.PP

.SH BUGS
Unknown
.PP
.SH AUTHORS
.B Made by:
.PP
- Alison Quintero
.PP
- Fredy Acuna

